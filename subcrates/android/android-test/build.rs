fn main() {
    if std::env::var("CARGO_FEATURE_ANDROID_TEST").is_ok() {

        println!("cargo:rustc-env=JAVA_PACKAGE={}",
            match ::std::env::var_os("JAVA_PACKAGE") {
                Some(val) => val.into_string().expect("Couldn't get value of env JAVA_PACKAGE"),
                None => "".to_string(),
            }
        );

        println!("cargo:rustc-env=JAVA_OUTPUT_PATH={}",
            match ::std::env::var_os("GEN_JAVA_FILE_PATH") {
                Some(val) => val.into_string().expect("Couldnt' get value of env GEN_JAVA_FILE_PATH"),
                None => panic!("To use android-test, the enviroment variable 'GEN_JAVA_FILE_PATH' must \
                be set, this is the path for where the generated java unit test file will be placed"),
            }
        );

        println!("cargo:rustc-env=INSTRUMENT_TEST_CLASS_PREFIX={}",
            match ::std::env::var_os("INSTRUMENT_TEST_CLASS_PREFIX") {
                Some(val) => val.into_string().expect("Couldnt' get value of env INSTRUMENT_TEST_CLASS_PREFIX"),
                _ => "".to_string(),
            }
        );

        println!("cargo:rustc-env=LIBRARY_FILE_NAME={}",
            match ::std::env::var_os("LIBRARY_FILE_NAME") {
                Some(val) => val.into_string().expect("Couldnt' get value of env GEN_JAVA_FILE_PATH"),
                None => panic!("To use android-test, the enviroment variable 'LIBRARY_FILE_NAME' must \
                be set, this is the name of the system library generated by your crate"),
            }
        );
    }
    else {
        println!("cargo:rustc-env=JAVA_PACKAGE=");
        println!("cargo:rustc-env=JAVA_OUTPUT_PATH=");
        println!("cargo:rustc-env=INSTRUMENT_TEST_CLASS_PREFIX=");
        println!("cargo:rustc-env=LIBRARY_FILE_NAME=");
    }
}
